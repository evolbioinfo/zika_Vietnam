import os

# To run locally:
# snakemake --snakefile Snakefile_acr --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To run on bioevo:
# module load conda && source /local/gensoft2/exe/conda/3.19.0/conda/bin/activate snakemake && module load singularity
# snakemake --snakefile Snakefile_acr --config folder='/pasteur/homes/azhukova/projects/zika_atlas' --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -p bioevo --qos=bioevo -A bioevo -J {params.name}" --jobs 300

# To visualise the pipeline
# snakemake --snakefile Snakefile_acr --config folder=.. --dag | dot -Tsvg > pipeline_acr.svg

localrules: all, pastml_2_loc_ht

ruleorder: pastml_2_loc_ht > pastml_2_loc > pastml_loc_ht > pastml_F81 > pastml_JC

folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data')

serotypes = ['DENV1', 'DENV2', 'DENV3', 'DENV4']

# The folder where the reconstructed ACR maps will be placed
maps_dir = 'maps'

locs = ['country_code', 'location']

rule all:
    input:
        expand(os.path.join(data_dir, maps_dir, '{loc}', 'geo_map_{loc}.html'), loc=locs),

        expand(os.path.join(data_dir, maps_dir, '{loc}', 'acr_map_{loc}_Asian.{type}.html'),
        loc=['location_host_type', 'country_code_host_type', 'country_code_location', 'country_code_location_host_type', 'host_type'],
        type=['notdated', 'td', 'tt', 'lsd', 'lsd_tt', 'lsd_td']),



rule metadata_loc:
    '''
    Enriches location information in the metadata.
    '''
    input:
        data = os.path.join(data_dir, 'metadata.tab'),
    output:
        data = os.path.join(data_dir, 'metadata.location.tab')
    params:
        mem = 2000,
        name = 'location'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/location_enchancer.py --output_data {output.data} --input_data {input.data}
        """

rule pastml_loc_ht:
    '''
    ACR for location+host_type with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'trees', '{tree}.nwk'),
        data = os.path.join(data_dir, 'metadata.location.tab'),
        param_col1 = os.path.join(data_dir, 'pastml', '{col1}', '{tree}', 'params.character_{col1}.method_MPPA.model_F81.tab'),
        param_ht = os.path.join(data_dir, 'pastml', 'host_type', '{tree}', 'params.character_host_type.method_MPPA.model_JC.tab'),
    output:
        map = os.path.join(data_dir, maps_dir, '{col1,(country_code|location)}_host_type', 'acr_map_{col1}_host_type_{tree}.html'),
        tree = os.path.join(data_dir, maps_dir, '{col1}_host_type', 'acr_tree_{col1}_host_type_{tree}.html')
    threads: 3
    singularity: "docker://evolbioinfo/pastml:v1.9.15"
    params:
        mem = 4000,
        name = 'pastml_{col1}_host_type_{tree}',
        col1 = '{col1}',
        date_col = 'collection_date',
        wd = os.path.join(data_dir, 'pastml', '{col1}_host_type', '{tree}')
    shell:
        """
        pastml --tree {input.tree} --data {input.data} \
        --html_compressed {output.map} --html {output.tree} --columns {params.col1} host_type  --name_column {params.col1} \
        --date_column {params.date_col} --work_dir {params.wd} --parameters {input.param_col1} {input.param_ht} \
        --tip_size_threshold 25
        """

rule pastml_2_loc:
    '''
    ACR for 2 locations with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'trees', '{tree}.nwk'),
        data = os.path.join(data_dir, 'metadata.location.tab'),
        param_col1 = os.path.join(data_dir, 'pastml', '{col1}', '{tree}', 'params.character_{col1}.method_MPPA.model_F81.tab'),
        param_col2 = os.path.join(data_dir, 'pastml', '{col2}', '{tree}', 'params.character_{col2}.method_MPPA.model_F81.tab'),
    output:
        map = os.path.join(data_dir, maps_dir, \
        '{col1,(country_code|location)}_{col2,(country_code|location)}', \
        'acr_map_{col1}_{col2}_{tree}.html'),
        tree = os.path.join(data_dir, maps_dir, '{col1}_{col2}', 'acr_tree_{col1}_{col2}_{tree}.html')
    threads: 3
    singularity: "docker://evolbioinfo/pastml:v1.9.15"
    params:
        mem = 4000,
        name = 'pastml_{col1}_{col2}_{tree}',
        col1 = '{col1}',
        col2 = '{col2}',
        date_col = 'collection_date',
        wd = os.path.join(data_dir, 'pastml', '{col1}_{col2}', '{tree}')
    shell:
        """
        pastml --tree {input.tree} --data {input.data} \
        --html_compressed {output.map} --html {output.tree} --columns {params.col1} {params.col2} \
        --name_column {params.col1} --date_column {params.date_col} --work_dir {params.wd} \
        --parameters {input.param_col1} {input.param_col2} \
        --tip_size_threshold 25
        """

rule pastml_2_loc_ht:
    '''
    ACR for 2 locations+host_type with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'trees', '{tree}.nwk'),
        data = os.path.join(data_dir, 'metadata.location.tab'),
        param_col1 = os.path.join(data_dir, 'pastml', '{col1}', '{tree}', 'params.character_{col1}.method_MPPA.model_F81.tab'),
        param_col2 = os.path.join(data_dir, 'pastml', '{col2}', '{tree}', 'params.character_{col2}.method_MPPA.model_F81.tab'),
        param_ht = os.path.join(data_dir, 'pastml', 'host_type', '{tree}', 'params.character_host_type.method_MPPA.model_JC.tab'),
    output:
        map = os.path.join(data_dir, maps_dir, '{col1,((country_code)|(location)|(continent))}_{col2,((country_code)|(location)|(continent))}_host_type',\
         'acr_map_{col1}_{col2}_host_type_{tree}.html'),
        tree = os.path.join(data_dir, maps_dir, '{col1,((country_code)|(location)|(continent))}_{col2,((country_code)|(location)|(continent))}_host_type', \
        'acr_tree_{col1}_{col2}_host_type_{tree}.html'),
        url = os.path.join(data_dir, 'pastml', '{col1,((country_code)|(location)|(continent))}_{col2,((country_code)|(location)|(continent))}_host_type', \
        '{tree}', 'iTOL_tree_id.txt'),
    threads: 3
    singularity: "docker://evolbioinfo/pastml:v1.9.15"
    params:
        mem = 4000,
        name = 'pastml_{col1}_{col2}_host_type_{tree}',
        col1 = '{col1}',
        col2 = '{col2}',
        date_col = 'collection_date',
        itol_name = '{tree}',
        wd = os.path.join(data_dir, 'pastml', '{col1}_{col2}_host_type', '{tree}')
    shell:
        """
        pastml --tree {input.tree} --data {input.data} \
        --html_compressed {output.map} --html {output.tree} --columns {params.col1} {params.col2} host_type \
        --name_column {params.col1} --date_column {params.date_col} --work_dir {params.wd} \
        --parameters {input.param_col1} {input.param_col2} {input.param_ht} \
        --tip_size_threshold 25 \
        --upload_to_itol --itol_id ZxuhG2okfKLQnsgd5xAEGQ --itol_project ZIKV --itol_tree_name {params.itol_name}
        """

rule pastml_F81:
    '''
    ACR with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'trees', '{tree}.nwk'),
        data = os.path.join(data_dir, 'metadata.location.tab'),
    output:
        map = os.path.join(data_dir, maps_dir, '{col,(country_code|location|host_type)}', 'acr_map_{col}_{tree}.html'),
        tree = os.path.join(data_dir, maps_dir, '{col,(country_code|location|host_type)}', 'acr_tree_{col}_{tree}.html'),
        param = os.path.join(data_dir, 'pastml', '{col,(country_code|location|host_type)}', '{tree}', 'params.character_{col}.method_MPPA.model_F81.tab'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.15"
    params:
        mem = 4000,
        name = 'pastml_{col}_{tree}',
        col = '{col}',
        date_col = 'collection_date',
        wd = os.path.join(data_dir, 'pastml', '{col}', '{tree}')
    shell:
        """
        pastml --tree "{input.tree}" --data {input.data} --model F81 \
        --html_compressed "{output.map}" --html "{output.tree}" --columns {params.col} \
        --date_column {params.date_col} -v --work_dir "{params.wd}" --tip_size_threshold 20
        """

rule pastml_JC:
    '''
    ACR with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'trees', '{tree}.nwk'),
        data = os.path.join(data_dir, 'metadata.location.tab'),
    output:
        map = os.path.join(data_dir, maps_dir, '{col,(country_code|location|host_type)}', 'acr_map_{col}_{tree}.html'),
        tree = os.path.join(data_dir, maps_dir, '{col,(country_code|location|host_type)}', 'acr_tree_{col}_{tree}.html'),
        param = os.path.join(data_dir, 'pastml', '{col,(country_code|location|host_type)}', '{tree}', 'params.character_{col}.method_MPPA.model_JC.tab'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.15"
    params:
        mem = 4000,
        name = 'pastml_{col}_{tree}',
        col = '{col}',
        date_col = 'collection_date',
        wd = os.path.join(data_dir, 'pastml', '{col}', '{tree}')
    shell:
        """
        pastml --tree "{input.tree}" --data {input.data} --model JC \
        --html_compressed "{output.map}" --html "{output.tree}" --columns {params.col} \
        --date_column {params.date_col} -v --work_dir "{params.wd}" --tip_size_threshold 20
        """

rule geomap:
    '''
    Reconstructs the geographical map coloured according to PastML categories.
    '''
    input:
        data = os.path.join(data_dir, 'metadata.location.tab'),
    output:
        geo_map = os.path.join(data_dir, maps_dir, '{loc}', 'geo_map_{loc}.html'),
    threads: 1
    params:
        mem = 4000,
        name = 'geomap_{loc}',
        loc = '{loc}',
        country_col = 'country'
    singularity: "docker://evolbioinfo/pastml:v1.9.15"
    shell:
        """
        geomap --data {input.data} --html {output.geo_map} --location {params.loc} --country {params.country_col}
        """

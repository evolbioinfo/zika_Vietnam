import os

# To run locally:
# snakemake --snakefile Snakefile_combined_MSA --keep-going --cores 4 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To visualise the pipeline
# snakemake --snakefile Snakefile_combined_MSA --dag | dot -Tsvg > pipeline_combined_MSA.svg

localrules: all, entrez


folder = os.path.abspath(config.get("folder", '..'))
data_dir = os.path.join(folder, 'data')
genbank_data = os.path.join(data_dir, 'genbank_20200811_org_Zika_virus_len_8000_14000.fa')


os.makedirs('logs', exist_ok=True)

rule all:
    input:
        os.path.join(data_dir, 'aln.fa'),
        os.path.join(data_dir, 'metadata.combined.tab'),


rule entrez:
    '''
    Transforms dengue input file into fasta and metadata
    '''
    input:
        data = genbank_data
    output:
        fa = temp(os.path.join(data_dir, 'sequences.gb.fasta')),
        data = temp(os.path.join(data_dir, 'metadata.gb.tab')),
    params:
        mem = 2000,
        name = 'metadata'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 py/gb_reader.py --input_fa {input.data} --output_fa {output.fa} --output_data {output.data}
        """

rule genome_detective:
    '''
    Manual step: detect serotype and genotype with with Genome Detective.
    '''
    input:
        fa = os.path.join(data_dir, 'sequences.gb.fasta'),
    output:
        gd_data = os.path.join(data_dir, 'gd.csv'),
    params:
        mem = 1000,
        name = 'genome_detective'
    threads: 1
    shell:
        """
        echo "Manual step to be performed by Genome Detective."
        """

rule post_genome_detective:
    '''
    Puts together gb metadata and genotype data detected by Genome Detective
    '''
    input:
        gd_data = os.path.join(data_dir, 'gd.csv'),
        fa = os.path.join(data_dir, 'sequences.gb.fasta'),
        data = os.path.join(data_dir, 'metadata.gb.tab')
    output:
        fa = os.path.join(data_dir, 'sequences.fa'),
        data = os.path.join(data_dir, 'metadata.tab')
    params:
        mem = 2000,
        name = 'gd_metadata'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 py/gd_reader.py --input_fa {input.fa} --output_fa {output.fa} --output_data {output.data} \
        --input_data {input.data} --gd_data {input.gd_data}
        """

rule add_Vietnam:
    '''
    Adds metadata and sequences from Vietnam
    '''
    input:
        fa = os.path.join(data_dir, 'sequences.fa'),
        v_fa = os.path.join(data_dir, 'Vietnam.fa'),
        data = os.path.join(data_dir, 'metadata.tab')
    output:
        fa = os.path.join(data_dir, 'sequences.combined.fa'),
        data = os.path.join(data_dir, 'metadata.combined.tab')
    params:
        mem = 2000,
        name = 'gd_metadata'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 py/add_Vietnam.py --input_fa {input.fa} --output_fa {output.fa} --output_data {output.data} \
        --input_data {input.data} --input_Vietnam {input.v_fa}
        """


rule get_seq_ids:
    '''
    Extract sequence ids of interest.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.combined.tab'),
    output:
        tab = os.path.join(data_dir, 'ids.txt')
    params:
        mem = 500,
        name = 'ids',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 py/get_seq_ids.py --input_data {input.tab} --output_data {output.tab}
        """

rule aln_against_reference:
    '''
    Align sequences against a reference.
    '''
    input:
        fa = os.path.join(data_dir, 'sequences.combined.fa'),
        ref = os.path.join(data_dir, 'ref', 'ZIKV.fa')
    output:
        aln = temp(os.path.join(data_dir, 'aln.ref.fa'))
    params:
        mem = 1000,
        name = 'aln',
        qos = 'fast'
    threads: 12
    singularity: "docker://evolbioinfo/mafft:v7.313"
    shell:
        """
        mafft --thread {threads} --memsave --retree 1 --maxiterate 0 --add {input.fa} \
        --keeplength {input.ref} > {output.aln}
        """

rule remove_ref:
    '''
    Removes the reference from the alignment.
    '''
    input:
        aln = os.path.join(data_dir, 'aln.ref.fa'),
        ids = os.path.join(data_dir, 'ids.txt')
    output:
        aln = os.path.join(data_dir, 'aln.fa')
    params:
        mem = 1000,
        name = 'rmref',
        qos = 'fast',
    threads: 1
    singularity: "docker://evolbioinfo/goalign:v0.3.1"
    shell:
        """
        goalign subset -i {input.aln} -f {input.ids} -o {output.aln}
        """
import os

# To run locally:
# snakemake --snakefile Snakefile_dating --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To run on bioevo:
# module load conda && source /local/gensoft2/exe/conda/3.19.0/conda/bin/activate snakemake && module load singularity
# snakemake --snakefile Snakefile_dating --config folder='/pasteur/homes/azhukova/projects/zika_atlas' --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -p bioevo --qos=bioevo -A bioevo -J {params.name}" --jobs 300

# To visualise the pipeline
# snakemake --snakefile Snakefile_dating --config folder=.. --dag | dot -Tsvg > pipeline_dating.svg

localrules: all
ruleorder: preroot_tree > date_lsd > name_tree > rm_outliers_treedater > rm_outliers_treetime > date_treedater > date_treetime > root_tree > nex2nwk > get_seq_ids

folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data')

rule all:
    input:
        os.path.join(data_dir, 'rates.pdf'),
        expand(os.path.join(data_dir, 'trees', 'Asian.{type}.nwk'), type=['notdated', 'td', 'tt', 'lsd', 'lsd_tt', 'lsd_td'])

rule result_trees:
    input:
        tree = os.path.join(data_dir, 'best_tree.pos.rooted_African.nwk'),
        td = os.path.join(data_dir, 'best_tree.pos.rooted_African.treedated.nwk'),
        tt = os.path.join(data_dir, 'best_tree.pos.rooted_African.no_tt.treetimed.nwk'),
        lsd = os.path.join(data_dir, 'best_tree.pos.rooted_African.lsdated.nwk'),
        lsd_td = os.path.join(data_dir, 'best_tree.pos.rooted_African.no_td.lsdated.nwk'),
        lsd_tt = os.path.join(data_dir, 'best_tree.pos.rooted_African.no_tt.lsdated.nwk'),
    output:
        tree = os.path.join(data_dir, 'trees', 'Asian.notdated.nwk'),
        td = os.path.join(data_dir, 'trees', 'Asian.td.nwk'),
        tt = os.path.join(data_dir, 'trees', 'Asian.tt.nwk'),
        lsd = os.path.join(data_dir, 'trees', 'Asian.lsd.nwk'),
        lsd_td = os.path.join(data_dir, 'trees', 'Asian.lsd_td.nwk'),
        lsd_tt = os.path.join(data_dir, 'trees', 'Asian.lsd_tt.nwk'),
    threads: 1
    params:
        mem = 1000,
        name = 'result_trees',
    shell:
        """
        cp {input.tree} {output.tree}
        cp {input.td} {output.td}
        cp {input.tt} {output.tt}
        cp {input.lsd} {output.lsd}
        cp {input.lsd_tt} {output.lsd_tt}
        cp {input.lsd_td} {output.lsd_td}
        """

rule extract_dates_lsd:
    '''
    Reformats metadata into date file readable by LSD.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.tab')
    output:
        tab = os.path.join(data_dir, 'dates_lsd.tab')
    params:
        mem = 1000,
        name = 'dates',
        date_col = 'collection_date'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/extract_dates_lsd.py --data {input.tab} --dates {output.tab} \
        --date_col {params.date_col}
        """

rule extract_dates_treedater:
    '''
    Reformats metadata into date file readable by treedater.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.tab')
    output:
        tab = os.path.join(data_dir, 'dates_treedater.csv')
    params:
        mem = 1000,
        name = 'dates',
        date_col = 'collection_date'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/extract_dates_treedater.py --data {input.tab} --dates {output.tab} \
        --date_col {params.date_col}
        """

rule extract_dates_treetime:
    '''
    Reformats metadata into date file readable by TreeTime.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.tab')
    output:
        tab = os.path.join(data_dir, 'dates_treetime.csv')
    params:
        mem = 1000,
        name = 'dates',
        date_col = 'collection_date'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/extract_dates_treetime.py --data {input.tab} --dates {output.tab} \
        --date_col {params.date_col}
        """

rule rm_outliers_treedater:
    '''
    Removes outliers.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        ref_tree = os.path.join(data_dir, '{tree}.treedated.nwk'),
    output:
        tree = os.path.join(data_dir, '{tree}.no_td.nwk')
    params:
        mem = 1000,
        name = 'no_td'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/rm_outliers_td.py --in_tree {input.tree} --ref {input.ref_tree} --out_tree {output.tree}
        """

rule rm_outliers_treetime:
    '''
    Removes outliers.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        ref_log = os.path.join(data_dir, '{tree}.treetime.log'),
    output:
        tree = os.path.join(data_dir, '{tree}.no_tt.nwk')
    params:
        mem = 1000,
        name = 'no_tt'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/rm_outliers_tt.py --in_tree {input.tree} --ref {input.ref_log} --out_tree {output.tree}
        """

rule nex2nwk:
    '''
    Converts a nexus tree to newick.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nexus'),
    output:
        tree = os.path.join(data_dir, '{tree}.nwk'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'nex2nwk',
    threads: 1
    shell:
        """
        gotree reformat newick -i {input.tree} -f nexus -o {output.tree}
        sed -i -e 's/\\[[^]]*\\]//g' {output.tree}
        """

rule date_lsd:
    '''
    Dates a tree.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        dates = os.path.join(data_dir, 'dates_lsd.tab'),
        ref = os.path.join(data_dir, 'ref', 'ZIKV.fa')
    output:
        tree = os.path.join(data_dir, '{tree}.lsdated.nwk'),
        log = os.path.join(data_dir, '{tree}.lsd.log'),
    threads: 1
    singularity: "docker://evolbioinfo/lsd:v0.3beta-55183ca9d0"
    params:
        mem = 4000,
        name = 'lsd_{tree}',
        wd = os.path.join(data_dir,  '{tree}.lsdated')
    shell:
        """
        n=$(( `(tail {input.ref} -n 1 | wc -m)` - 1))

        rooted=$(find {input.tree} -name "*.rooted*")
        if [ -z "$rooted" ]
        then
            cmd="-r l"
        else
            cmd=""
        fi

        lsd -i {input.tree} -d {input.dates} -v 2 -c -s $n -f 100 $cmd -o {params.wd}

        mv "{params.wd}.date.newick" "{output.tree}"
        mv "{params.wd}" "{output.log}"
        rm "{params.wd}.newick"
        rm "{params.wd}.nexus"
        """

rule date_treedater:
    '''
    Dates a tree.
    '''
    input:
        tree = os.path.join(data_dir, 'named.{tree}.nwk'),
        dates = os.path.join(data_dir, 'dates_treedater.csv'),
        ref = os.path.join(data_dir, 'ref', 'ZIKV.fa')
    output:
        tree = os.path.join(data_dir, '{tree}.treedated.nwk'),
        log = os.path.join(data_dir, '{tree}.treedater.log'),
        tree_no = os.path.join(data_dir, '{tree}.treedater.outliers'),
        pdf = os.path.join(data_dir, '{tree}.treedater.rtt.pdf'),
    threads: 12
    singularity: "docker://evolbioinfo/treedater:89a0df0_bash"
    params:
        mem = 40000,
        name = 'treedater_{tree}',
    shell:
        """
        n=$(( `(tail {input.ref} -n 1 | wc -m)` - 1))


        rooted=$(find {input.tree} -name "*.rooted*")
        if [ -z "$rooted" ]
        then
            cmd="-r 1"
        else
            cmd="-r 0"
        fi

        Rscript  {folder}/py/date_with_treedater.R -t {input.tree} -d {input.dates} -o {output.tree} -l {output.log} \
        -s $n -m {threads} -p {output.pdf} -u {output.tree_no} $cmd
        """

rule date_treetime:
    '''
    Dates a tree.
    '''
    input:
        tree = os.path.join(data_dir, 'named.{tree}.nwk'),
        dates = os.path.join(data_dir, 'dates_treetime.csv'),
        aln = os.path.join(data_dir, 'aln.fa')
    output:
        tree = os.path.join(data_dir, '{tree}.treetimed.nexus'),
        dates = os.path.join(data_dir, '{tree}.treetime.dates'),
        rates = os.path.join(data_dir, '{tree}.treetime.rates'),
        log = os.path.join(data_dir, '{tree}.treetime.log'),
        pdf = os.path.join(data_dir, '{tree}.treetime.rtt.pdf'),
    threads: 12
    singularity: "docker://evolbioinfo/treetime:v0.5.5"
    params:
        mem = 40000,
        name = 'treetime_{tree}',
        wd = os.path.join(data_dir,  '{tree}.treetime')
    shell:
        """
        rooted=$(find {input.tree} -name "*.rooted*")
        if [ -z "$rooted" ]
        then
            cmd="--reroot ML"
        else
            cmd=""
        fi

        treetime --tree {input.tree} --dates {input.dates} --aln {input.aln} --clock-filter 3 $cmd \
        --confidence --covariation --branch-length-mode input --relax 1 3\
        --plot-rtt rtt.pdf --outdir {params.wd} --verbose 0 > {output.log}

        cp {params.wd}/dates.tsv {output.dates}
        cp {params.wd}/substitution_rates.tsv {output.rates}
        cp {params.wd}/timetree.nexus {output.tree}
        cp {params.wd}/rtt.pdf {output.pdf}

        rm -rf {params.wd}
        """
        
rule extract_date_predictions:
    '''
    Reformat dates nicely.
    '''
    input:
        os.path.join(data_dir, 'best_tree.pos.treedater.log'),
        os.path.join(data_dir, 'best_tree.pos.no_tt.treetime.log'),
        os.path.join(data_dir, 'best_tree.pos.no_td.prerooted_African.lsd.log'),
        os.path.join(data_dir, 'best_tree.pos.no_tt.prerooted_African.lsd.log'),
        os.path.join(data_dir, 'best_tree.pos.prerooted_African.lsd.log'),
        #
        os.path.join(data_dir, 'best_tree.pos.rooted_African.treedater.log'),
        os.path.join(data_dir, 'best_tree.pos.rooted_African.no_tt.treetime.log'),
        os.path.join(data_dir, 'best_tree.pos.rooted_African.no_td.lsd.log'),
        os.path.join(data_dir, 'best_tree.pos.rooted_African.no_tt.lsd.log'),
        os.path.join(data_dir, 'best_tree.pos.rooted_African.lsd.log'),
        #
        os.path.join(data_dir, 'best_tree.pos.no_tt.treetime.dates'),
        os.path.join(data_dir, 'best_tree.pos.rooted_African.treetime.dates'),
    output:
        tab = os.path.join(data_dir, 'date_predictions.tab')
    threads:
        1
    params:
        mem = 2000,
        name = 'dates',
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/date_formatter.py \
        --logs {input} \
        --tab {output.tab} \
        --labels "ZIKV\ttreedater" "ZIKV\tTreeTime" "ZIKV\tLSD (td outliers removed)" "ZIKV\tLSD (TT outliers removed)" "ZIKV\tLSD" \
        "Asian\ttreedater" "Asian\tTreeTime" "Asian\tLSD (td outliers removed)" "Asian\tLSD (TT outliers removed)" "Asian\tLSD" \
        --type 'type'
        """

rule vis_date_predictions:
    '''
    Visualises dates nicely.
    '''
    input:
        tab = os.path.join(data_dir, 'date_predictions.tab')
    output:
        rates = os.path.join(data_dir, 'rates.pdf'),
        dates = os.path.join(data_dir, 'dates.pdf')
    threads:
        1
    params:
        mem = 2000,
        name = 'vis_dates',
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/date_vis.py --tab {input.tab} --dates {output.dates} --rates {output.rates}
        """


rule name_tree:
    '''
    Names internal tree nodes and collapses zero branches.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
    output:
        tree = temp(os.path.join(data_dir, 'named.{tree}.nwk')),
    singularity:
        "docker://evolbioinfo/python-evol:v3.6"
    params:
        mem = 2000,
        name = 'name',
    threads: 1
    shell:
        """
        python3 {folder}/py/name_tree.py --input_tree "{input.tree}" --output_tree "{output.tree}"
        """


rule root_tree:
    '''
    Roots a tree with an outgroup.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        outgroup = os.path.join(data_dir, 'ids_{outgroup}.txt'),
    output:
        tree = os.path.join(data_dir, '{tree}.rooted_{outgroup}.nwk'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'root',
    threads: 1
    shell:
        """
        gotree reroot outgroup -i {input.tree} -l "{input.outgroup}" -o "{output.tree}" -r
        """


rule preroot_tree:
    '''
    Roots a tree with an outgroup.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        outgroup = os.path.join(data_dir, 'ids_{outgroup}.txt'),
    output:
        tree = temp(os.path.join(data_dir, '{tree}.prerooted_{outgroup}.nwk')),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'preroot',
    threads: 1
    shell:
        """
        gotree reroot outgroup -i {input.tree} -l "{input.outgroup}" -o "{output.tree}"
        """

rule get_seq_ids:
    '''
    Extract sequence ids of interest.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.tab'),
    output:
        tab = os.path.join(data_dir, 'ids_{type,(African|Asian)}.txt')
    params:
        mem = 500,
        name = 'ids_{type}',
        col_value = '{type}',
        col_name = 'type',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/get_seq_ids.py --input_data {input.tab} --output_data {output.tab} \
        --col_name "{params.col_name}" --col_value {params.col_value}
        """

import os

# To run locally:
# snakemake --snakefile Snakefile_trees --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To run on bioevo:
# module load conda && source /local/gensoft2/exe/conda/3.19.0/conda/bin/activate snakemake && module load singularity
# snakemake --snakefile Snakefile_trees --config folder='/pasteur/homes/azhukova/projects/zika_atlas' --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -p bioevo --qos=bioevo -A bioevo -J {params.name}" --jobs 300

# To visualise the pipeline
# snakemake --snakefile Snakefile_trees --config folder=.. --dag | dot -Tsvg > pipeline_trees.svg

localrules: all

folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data20200811')

tree_types = ['raxml', 'iq']

rule all:
    input:
        os.path.join(data_dir, 'best_tree.pos.nwk'),
        os.path.join(data_dir, 'distances.pos.tab'),


rule partitioning_nt:
    '''
    Prepare nucleotide partitioning files.
    '''
    input:
        ref = os.path.join(data_dir, 'ref', 'ZIKV.xml'),
    output:
        part = os.path.join(data_dir, 'partition_{tool}.{type}.txt'),
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    params:
        mem = 10000,
        name = 'part',
        tool = '{tool}',
        type = '{type}'
    shell:
        """
        python3 {folder}/py/dna_partitioner.py --input_xml {input.ref} --output_partitioning {output.part} \
        --tool {params.tool} --level {params.type}
        """

rule raxml_nt:
    '''
    Reconstructs a tree with RAxML.
    '''
    input:
        aln = os.path.join(data_dir, 'aln.fa'),
        part = os.path.join(data_dir, 'partition_raxml.{type}.txt'),
    output:
        tree = os.path.join(data_dir, 'raxml_tree.{type,(gene|type|pos)}.nwk'),
        log = os.path.join(data_dir, 'raxml_tree.{type,(gene|type|pos)}.log'),
        model = os.path.join(data_dir, 'raxml_tree.{type,(gene|type|pos)}.model'),
    threads: 12
    singularity: "docker://evolbioinfo/raxml-ng:v0.9.0"
    params:
        mem = 10000,
        name = 'raxml.{type}',
        part = '{type}',
    shell:
        """
        cp {input.aln} {input.aln}.{params.part}
        raxml-ng --model {input.part} --msa {input.aln}.{params.part} --msa-format FASTA --data-type DNA --tree pars{{5}} \
        --seed 239 --threads {threads} --force
        mv {input.aln}.{params.part}.raxml.bestTree {output.tree}
        mv {input.aln}.{params.part}.raxml.log {output.log}
        mv {input.aln}.{params.part}.raxml.bestModel {output.model}
        rm -rf {input.aln}.{params.part}*
        """

rule iqtree_nt:
    '''
    Reconstructs a tree with IQTREE.
    '''
    input:
        aln = os.path.join(data_dir, 'aln.fa'),
        part = os.path.join(data_dir, 'partition_iq.{type}.txt'),
    output:
        tree = os.path.join(data_dir, 'iq_tree.{type,(gene|type|pos)}.nwk'),
        log = os.path.join(data_dir, 'iq_tree.{type,(gene|type|pos)}.log'),
    threads: 12
    singularity: "docker://evolbioinfo/iqtree:v2.0-rc1"
    params:
        mem = 10000,
        name = 'iq.{type}',
    shell:
        """
        iqtree -s {input.aln} -st DNA -nt {threads} -alrt 0 -m GTR+FO+I+G6 -spp {input.part} --runs 1
        mv {input.part}.treefile {output.tree}
        sed -i -e 's/\\///g' {output.tree}
        mv {input.part}.iqtree {output.log}
        rm -rf {input.part}.*
        """

rule log_lh_nt:
    '''
    Compares tree likelihoods.
    '''
    input:
        aln = os.path.join(data_dir, 'aln.fa'),
        trees = expand(os.path.join(data_dir, '{type}_tree.{{part}}.nwk'), type=tree_types),
        part = os.path.join(data_dir, 'partition_raxml.{part}.txt'),
    output:
        log = os.path.join(data_dir, 'loglikelihoods.{part}.log'),
    threads: 12
    singularity: "docker://evolbioinfo/raxml-ng:v0.9.0"
    params:
        mem = 10000,
        name = 'lh.{part}',
    shell:
        """
        for t in `(ls {input.trees})`; do
            l=`(raxml-ng --loglh --model {input.part} --msa {input.aln} --tree $t | grep "Final LogLikelihood:" | sed -e "s/Final LogLikelihood://g")`
            echo `(basename $t .nwk)`"  $l">> {output.log}
        done
        """

rule best_tree:
    '''
    Gets the best tree in terms of likelihood.
    '''
    input:
        log = os.path.join(data_dir, 'loglikelihoods.{part}.log'),
        trees = expand(os.path.join(data_dir, '{type}_tree.{{part}}.nwk'), type=tree_types),
    output:
        tree = os.path.join(data_dir, 'best_tree.{part,(gene|type|pos|aa)}.nwk'),
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    params:
        mem = 10000,
        name = 'best_tree.{part}',
    shell:
        """
        python3 {folder}/py/best_tree.py --log {input.log} --trees {input.trees} --best_tree {output.tree}
        """

rule compare_trees:
    '''
    Calculates RF and quartet distances between the trees.
    '''
    input:
        trees = os.path.join(data_dir, 'all_trees.{part}.nwk'),
        names = os.path.join(data_dir, 'all_trees.{part}.names'),
        qt = os.path.join(data_dir, 'distances.{part}.quartet.tab'),
    output:
        log = os.path.join(data_dir, 'distances.{part,(gene|type|pos|aa)}.tab')
    threads: int(len(tree_types) * (len(tree_types) - 1) / 2)
    params:
        mem = 10000,
        name = 'dist'
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/compare_trees.py --trees {input.trees} --labels {input.names} \
        --output {output.log} --qt {input.qt}
        """

rule merge_nwk:
    '''
    Merge multiple one-tree newick files into one multiple-tree newick file.
    '''
    input:
        trees = expand(os.path.join(data_dir, '{type}_tree.{{part}}.nwk'), type=tree_types)
    output:
        trees = temp(os.path.join(data_dir, 'all_trees.{part,(gene|type|pos|aa)}.nwk')),
        names = temp(os.path.join(data_dir, 'all_trees.{part,(gene|type|pos|aa)}.names'))
    params:
        mem = 1000,
        name = 'merge_nwk',
        names = '\t'.join(tree_types)
    threads: 1
    shell:
        """
        ls {input.trees} | xargs cat >> {output.trees}
        echo "{params.names}" >> {output.names}
        """

rule quartet_dists:
    '''
    Calculates quartet distances with tqDist.
    '''
    input:
        trees = os.path.join(data_dir, 'all_trees.{part}.nwk')
    output:
        log = temp(os.path.join(data_dir, 'distances.{part,(gene|type|pos|aa)}.quartet.tab')),
    threads: 1
    singularity: "docker://evolbioinfo/tqdist:v1.0.1"
    params:
        mem = 8000,
        name = 'tqdist'
    shell: "all_pairs_quartet_dist {input} {output}"

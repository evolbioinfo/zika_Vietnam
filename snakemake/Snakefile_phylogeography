import os

# To run locally:
# snakemake --snakefile Snakefile_phylogeography --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To visualise the pipeline
# snakemake --snakefile Snakefile_phylogeography --config folder=.. --dag | dot -Tsvg > pipeline_phylogeography.svg

localrules: all, pastml_itol, fig
ruleorder: pastml_col > nex2nwk

folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data')

os.makedirs('logs', exist_ok=True)

rule all:
    input:
        os.path.join(data_dir, 'acr', 'compressed.country_Vietnam.best_tree.pos.lsd2.html'),
        os.path.join(data_dir, 'acr', 'full.country.best_tree.pos.lsd2.html'),
        os.path.join(data_dir, 'figures', 'best_tree.pos.lsd2.country.svg'),


rule extract_dates_lsd:
    '''
    Reformats metadata into date file readable by LSD.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.combined.tab')
    output:
        tab = os.path.join(data_dir, 'dates_lsd.tab')
    params:
        mem = 1000,
        name = 'dates',
        date_col = 'collection_date'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 py/extract_dates_lsd.py --data {input.tab} --dates {output.tab} \
        --date_col {params.date_col}
        """

rule nex2nwk:
    '''
    Converts a nexus tree to newick.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nexus'),
    output:
        tree = os.path.join(data_dir, '{tree}.nwk'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'nex2nwk',
    threads: 1
    shell:
        """
        gotree reformat newick -i {input.tree} -f nexus -o {output.tree}
        sed -i -e 's/\\[[^]]*\\]//g' {output.tree}
        """

rule tree_size:
    '''
    Calculates tree size.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
    output:
        length = os.path.join(data_dir, '{tree}.ntips'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'tree_size',
        qos = 'fast'
    threads: 1
    shell:
        """
        gotree stats -i {input.tree} | tail -n 1 | awk '{{print $3}}' > {output.length}
        """

rule date_lsd2:
    '''
    Dates a tree.
    -u 0
    no -v
    -m 33%
    '''
    input:
        aln_length =  os.path.join(data_dir, 'aln.length'),
        tree = os.path.join(data_dir, 'best_tree.pos.rooted_African.collapsed.nwk'),
        ntips = os.path.join(data_dir, 'best_tree.pos.rooted_African.collapsed.ntips'),
        dates = os.path.join(data_dir, 'dates_lsd.tab'),
    output:
        tree = os.path.join(data_dir, 'best_tree.pos.lsd2.nexus'),
        log = os.path.join(data_dir, 'best_tree.pos.lsd2.log'),
        rd = os.path.join(data_dir, 'best_tree.pos.lsd2.rootdate'),
        outliers = os.path.join(data_dir, 'best_tree.pos.outliers'),
    threads: 1
    singularity: "docker://evolbioinfo/lsd2:v1.6.5"
    params:
        mem = 4000,
        name = 'lsd2',
        wd = os.path.join(data_dir, 'best_tree.pos.wd_lsd2'),
    shell:
        """
        n=`head {input.aln_length}`
        t=`head {input.ntips}`
        m=`awk -v t="$t" 'BEGIN {{ m=int(t * 0.33); print m}}'`

        echo "lsd2 -i {input.tree} -d {input.dates} -c -s $n -o {params.wd} -f 1000 -l 0 -e 3 -m $m -u 0 -U 0"

        lsd2 -i {input.tree} -d {input.dates} -c -s $n -o {params.wd}  -f 1000 -l 0 -e 3 -m $m -u 0 -U 0

        pattern_g='\\- The input dates associated with the following'
        pattern_s='\\- The input dates associated with the following [0-9]* nodes are considered as outliers, so the nodes were removed from the analysis:  '

        outliers=`grep -i "$pattern_g" {params.wd} | sed -e "s/$pattern_s//g"`
        for o in $outliers
        do
            echo $o >> {output.outliers}
        done

        mv "{params.wd}.date.nexus" "{output.tree}"
        mv "{params.wd}" "{output.log}"
        rm -rf {params.wd}*

        echo `grep "], tMRCA" {output.log} | sed -e 's/rate [0-9\\.e+-]\\+ \\[[0-9\\.e+-]\\+; [0-9\\.e+-]\\+\\], tMRCA //g' \
        | sed -e 's/ \\[[0-9\\.e+-]\\+; [0-9\\.e+-]\\+\\], objective function [0-9\\.e+-]\\+//g'` > {output.rd}
        """
        
rule pastml_col:
    '''
    ACR with PastML.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nexus'),
        data = os.path.join(data_dir, 'metadata.combined.tab'),
    output:
        data = os.path.join(data_dir, 'acr', 'pastml', '{col,country|region|intregion}', '{tree}', 'combined_ancestral_states.tab'),
        pars = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'params.character_{col}.method_MPPA.model_F81.tab'),
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'named.tree_{tree}.nwk'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'acr_{col}.{tree}',
        wd = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}')
    shell:
        """
        echo "pastml --tree {input.tree} --data {input.data} --columns "{wildcards.col}" -v --work_dir "{params.wd}" --smoothing --resolve_polytomies "
        pastml --tree {input.tree} --data {input.data} --columns "{wildcards.col}" -v --work_dir "{params.wd}" \
        --smoothing --resolve_polytomies
        """

rule pastml_vis_tree:
    '''
    Visualisation with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'named.tree_{tree}.nwk'),
    output:
        map = os.path.join(data_dir, 'acr', 'full.{col,country|region|intregion}.{tree}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'vist_{col}.{tree}',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'vist_{col}', '{tree}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html "{output.map}" \
        --columns "{wildcards.col}" --prediction_method COPY

        rm -rf "{params.wd}"
        """

rule pastml_itol:
    '''
    Visualisation with iTOL.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'named.tree_{tree}.nwk'),
        pars = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'params.character_{col}.method_MPPA.model_F81.tab'),
    output:
        itol = os.path.join(data_dir, 'acr', '{tree}.acr_{col,country|region|intregion}.itol'),
        treeid = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'iTOL_tree_id.txt'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'itol_{col}.{tree}',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'itol_{col}', '{tree}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}"  \
        --columns "{wildcards.col}" --parameters {input.pars} \
        --upload_to_itol --itol_id ZxuhG2okfKLQnsgd5xAEGQ --itol_project ZIKV \
        --itol_tree_name "{wildcards.tree}"

        mv {params.wd}/iTOL_url.txt {output.itol}
        mv {params.wd}/iTOL_tree_id.txt  {output.treeid}

        rm -rf "{params.wd}"
        """


rule pastml_vis_focused:
    '''
    Visualisation with PastML focused on a particular character state.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', 'country', '{tree}', 'named.tree_{tree}.nwk'),
    output:
        map = os.path.join(data_dir, 'acr', 'compressed.country_{country,[A-Z][a-zA-Z]+}.{tree}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'vis_country_{country}.{tree}',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'vis_{country}', '{tree}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html_compressed "{output.map}" \
        --columns country --tip_size_threshold 20 --prediction_method COPY \
        --focus "{wildcards.country}"

        rm -rf "{params.wd}"
        """

rule fig:
    '''
    Extracts itol visualisations.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'iTOL_tree_id.txt'),
        rd = os.path.join(data_dir, '{tree}.rootdate'),
    output:
        loc = os.path.join(data_dir, 'figures', '{tree}.{col}.{format}')
    params:
        mem = 2000,
        name = 'itol_download_{tree}',
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    threads: 1
    shell:
        """
        tree=`head {input.tree}`
        date=`head {input.rd}`
        fixed_dates=`awk -v n="$date" -v m="2020" 'BEGIN {{ y=n + 1; while (y < m) {{printf("%.2f", int(y) - n); if (y + 1 < m) {{ printf(",") }}; y += 1;}}; }}'`
        rm -rf {output.loc}.config.tab
        echo "tree\t${{tree}}" > {output.loc}.config.tab

        echo '''format\t{wildcards.format}
display_mode\t2
horizontal_scale_factor\t0.6
line_width\t2
dashed_lines\t1
default_branch_color\trgb(170,170,170)
line_gradient\t1
current_font_size\t0
internal_scale\t1
internalScaleAxis\t0
internalScaleGrid\t1
internalScaleFontSize\t18
internalScale1\t100
internalScale2\t100
internalScale1Color\trgb(222,222,222)
internalScale2Color\trgb(222,222,222)
internalScaleFixedColor\trgb(222,222,222)
internalScale1Label\t0
internalScale2Label\t0
internalScaleFixedLabel\t1
internalScale1Wid\t1
internalScale2Wid\t1
internalScaleFixedWid\t1
internalScaleTimeScaling\t1
label_display\t0
datasets_visible\t1
arc\t350
rotation\t90
tree_x\t400
tree_y\t200''' >> {output.loc}.config.tab
        echo "internalScaleRootValue\t${{date}}" >> {output.loc}.config.tab
        echo "internalScaleFixed\t\\\"${{fixed_dates}}\\\"" >> {output.loc}.config.tab

        gotree download itol -i $tree -c {output.loc}.config.tab -o {output.loc} --format {wildcards.format}

        rm {output.loc}.config.tab
        """
import os

# To run locally:
# snakemake --snakefile Snakefile_analysis --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To run on bioevo:
# source /local/gensoft2/exe/conda/3.19.0/conda/bin/activate snakemake && module load singularity/3.5.3
# snakemake --snakefile Snakefile_analysis --config folder='/pasteur/homes/azhukova/projects/zika_Vietnam' --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -p bioevo --qos=bioevo -A bioevo -J {params.name}" --jobs 300

# To visualise the pipeline
# snakemake --snakefile Snakefile_analysis --config folder=.. --dag | dot -Tsvg > pipeline_analysis.svg

localrules: all
ruleorder: pastml_col > nex2nwk
folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data20200811')

ALN_LEN = 10807

rule all:
    input:
        os.path.join(data_dir, 'best_tree.pos.lsd2.nexus'),
        os.path.join(data_dir, 'acr', 'pastml', 'itol_country', 'best_tree.pos.lsd2', 'iTOL_url.txt'),
        os.path.join(data_dir, 'acr', 'compressed.country.best_tree.pos.lsd2.html'),
        os.path.join(data_dir, 'acr', 'compressed.country_Vietnam.best_tree.pos.lsd2.html'),
        os.path.join(data_dir, 'acr', 'full.country.best_tree.pos.lsd2.html'),

rule rm_Singapore:
    '''
    ACR with PastML.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        data = os.path.join(data_dir, 'metadata.combined.tab'),
    output:
        tree = os.path.join(data_dir, '{tree}.no_SG.nwk'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'rm_SG.{tree}',
    singularity: "docker://evolbioinfo/python-evol:v3.6richer"
    shell:
        """
        python3 {folder}/py/rm_SG.py --in_tree {input.tree} --out_tree {output.tree} --tab {input.data}
        """

rule collapse_non_informative_branches:
    '''
    Collapse internal branches of length <= 1/2 mut/site, set external branches of length <= 1/2 mut/site to zero.
    If the tree is rooted and a root child branch is to be collapsed, set it to zero instead (to keep the tree rooted).
    '''
    input:
        tree = os.path.join(folder, '{tree}.nwk'),
    output:
        tree = os.path.join(folder, '{tree}.collapsed.nwk'),
    params:
        mem = 2000,
        name = 'collapse',
        qos = 'fast',
        l = 1. / 2 / ALN_LEN
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6richer"
    shell:
        """
        python3 {folder}/py/collapse.py --input_tree {input.tree} --output_tree {output.tree} --threshold {params.l} --feature dist
        """

rule nex2nwk:
    '''
    Converts a nexus tree to newick.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nexus'),
    output:
        tree = os.path.join(data_dir, '{tree}.nwk'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'nex2nwk',
    threads: 1
    shell:
        """
        gotree reformat newick -i {input.tree} -f nexus -o {output.tree}
        sed -i -e 's/\\[[^]]*\\]//g' {output.tree}
        """


rule root_tree:
    '''
    Roots a tree with an outgroup.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        outgroup = os.path.join(data_dir, 'ids_{outgroup}.txt'),
    output:
        tree = os.path.join(data_dir, '{tree}.rooted_{outgroup}.nwk'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'root',
    threads: 1
    shell:
        """
        gotree reroot outgroup -i {input.tree} -l "{input.outgroup}" -o "{output.tree}" -r
        """

rule get_seq_ids:
    '''
    Extract sequence ids of interest.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.combined.tab'),
    output:
        tab = os.path.join(data_dir, 'ids_{type,(African|Asian)}.txt')
    params:
        mem = 500,
        name = 'ids_{type}',
        col_value = '{type}',
        col_name = 'type',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/get_seq_ids.py --input_data {input.tab} --output_data {output.tab} \
        --col_name "{params.col_name}" --col_value {params.col_value}
        """

rule tree_size:
    '''
    Calculates tree size.
    '''
    input:
        tree = os.path.join(folder, '{tree}.nwk'),
    output:
        length = os.path.join(folder, '{tree}.ntips'),
    singularity:
        "docker://evolbioinfo/gotree:v0.3.0b"
    params:
        mem = 2000,
        name = 'tree_size',
        qos = 'fast'
    threads: 1
    shell:
        """
        gotree stats -i {input.tree} | tail -n 1 | awk '{{print $3}}' > {output.length}
        """

rule date_lsd2:
    '''
    Dates a tree.
    -u 0
    no -v
    -m 33%
    '''
    input:
        tree = os.path.join(data_dir, 'best_tree.pos.rooted_African.collapsed.nwk'),
        ntips = os.path.join(data_dir, 'best_tree.pos.rooted_African.collapsed.ntips'),
        dates = os.path.join(data_dir, 'dates_lsd.tab'),
    output:
        tree = os.path.join(data_dir, 'best_tree.pos.lsd2.nexus'),
        log = os.path.join(data_dir, 'best_tree.pos.lsd2.log'),
        rd = os.path.join(data_dir, 'best_tree.pos.lsd2.rootdate'),
        outliers = os.path.join(data_dir, 'best_tree.pos.outliers'),
    threads: 1
    singularity: "docker://evolbioinfo/lsd2:v1.6.5"
    params:
        mem = 4000,
        name = 'lsd2',
        wd = os.path.join(data_dir, 'best_tree.pos.wd_lsd2'),
        l = ALN_LEN
    shell:
        """
        t=`head {input.ntips}`
        m=`awk -v t="$t" 'BEGIN {{ m=int(t * 0.33); print m}}'`

        echo "lsd2 -i {input.tree} -d {input.dates} -c -s {params.l} -o {params.wd} -f 1000 -l 0 -R 366 -e 3 -m $m -u 0 -U 0"

        lsd2 -i {input.tree} -d {input.dates} -c -s {params.l} -o {params.wd}  -f 1000 -l 0 -R 365 -e 3 -m $m -u 0 -U 0

        pattern_g='\\- The input dates associated with the following'
        pattern_s='\\- The input dates associated with the following [0-9]* nodes are considered as outliers, so the nodes were removed from the analysis:  '

        outliers=`grep -i "$pattern_g" {params.wd} | sed -e "s/$pattern_s//g"`
        for o in $outliers
        do
            echo $o >> {output.outliers}
        done

        mv "{params.wd}.date.nexus" "{output.tree}"
        mv "{params.wd}" "{output.log}"
        rm -rf {params.wd}*

        echo `grep "], tMRCA" {output.log} | sed -e 's/rate [0-9\\.e+-]\\+ \\[[0-9\\.e+-]\\+; [0-9\\.e+-]\\+\\], tMRCA //g' \
        | sed -e 's/ \\[[0-9\\.e+-]\\+; [0-9\\.e+-]\\+\\], objective function [0-9\\.e+-]\\+//g'` > {output.rd}
        """
        
rule pastml_col:
    '''
    ACR with PastML.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.{dating}.nexus'),
        data = os.path.join(data_dir, 'metadata.combined.tab'),
    output:
        data = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}.{dating,lsd2|tt-[a-z]+}', 'combined_ancestral_states.tab'),
        pars = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}.{dating}', 'params.character_{col}.method_MPPA.model_F81.tab'),
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}.{dating}',
        wd = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}.{dating}')
    shell:
        """
        echo "pastml --tree {input.tree} --data {input.data} --columns "{wildcards.col}" -v --work_dir "{params.wd}" --smoothing --resolve_polytomies "
        pastml --tree {input.tree} --data {input.data} --columns "{wildcards.col}" -v --work_dir "{params.wd}" --smoothing --resolve_polytomies
        """

rule pastml_vis:
    '''
    Visualisation with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
    output:
        map = os.path.join(data_dir, 'acr', 'compressed.{col,country|region|intregion}.{tree}.{dating,lsd2|tt-[a-z]+}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}.{dating}_vis',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'vis_{col}', '{tree}.{dating}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html_compressed "{output.map}" \
        --columns "{wildcards.col}" --tip_size_threshold 15 --prediction_method COPY

        rm -rf "{params.wd}"
        """

rule pastml_vis_tree:
    '''
    Visualisation with PastML.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
    output:
        map = os.path.join(data_dir, 'acr', 'full.{col,country|region|intregion}.{tree}.{dating,lsd2|tt-[a-z]+}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}.{dating}_vist',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'vist_{col}', '{tree}.{dating}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html "{output.map}" \
        --columns "{wildcards.col}" --prediction_method COPY

        rm -rf "{params.wd}"
        """

rule pastml_itol:
    '''
    Visualisation with iTOL.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', '{col}', '{tree}', 'named.tree_{tree}.nwk'),
    output:
        itol = os.path.join(data_dir, 'acr', 'pastml', 'itol_{col}', '{tree}', 'iTOL_url.txt'),
        treeid = os.path.join(data_dir, 'acr', 'pastml', 'itol_{col}', '{tree}', 'iTOL_tree_id.txt'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}_itol',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'itol_{col}', '{tree}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}"  \
        --columns "{wildcards.col}" --prediction_method COPY \
        --upload_to_itol --itol_id ZxuhG2okfKLQnsgd5xAEGQ --itol_project ZIKV \
        --itol_tree_name "{wildcards.tree}"
        """


rule pastml_vis_focused:
    '''
    Visualisation with PastML focused on a particular character state.
    '''
    input:
        tree = os.path.join(data_dir, 'acr', 'pastml', 'country', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
    output:
        map = os.path.join(data_dir, 'acr', 'compressed.country_{country}.{tree}.{dating,lsd2|tt-[a-z]+}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.9"
    params:
        mem = 4000,
        name = 'vis_country_{country}.{tree}.{dating}',
        wd = os.path.join(data_dir, 'acr', 'pastml', 'vis_{country}', '{tree}.{dating}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html_compressed "{output.map}" \
        --columns country --tip_size_threshold 15 --prediction_method COPY \
        --focus "{wildcards.country}"

        rm -rf "{params.wd}"
        """

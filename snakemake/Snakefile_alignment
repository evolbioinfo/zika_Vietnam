import os

# To run locally:
# snakemake --snakefile Snakefile_alignment --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To run on bioevo:
# snakemake --snakefile Snakefile_alignment --config folder='/pasteur/homes/azhukova/projects/zika_atlas' --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -p bioevo --qos=bioevo -A bioevo -J {params.name}" --jobs 300

# To visualise the pipeline
# snakemake --snakefile Snakefile_alignment --config folder=.. --dag | dot -Tsvg > pipeline_alignment.svg

localrules: all


folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data')


rule all:
    input:
        os.path.join(data_dir, 'iTOL', 'iTOL_colorstrip-host.txt'),
        os.path.join(data_dir, 'aln.fa')

rule get_seq_ids:
    '''
    Extract sequence ids of interest.
    '''
    input:
        tab = os.path.join(data_dir, 'metadata.tab'),
    output:
        tab = os.path.join(data_dir, 'ids.txt')
    params:
        mem = 500,
        name = 'ids',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/get_seq_ids.py --input_data {input.tab} --output_data {output.tab} \
        --col_name "{params.col_name}" --col_value {params.col_value}
        """

rule aln_against_reference:
    '''
    Align sequences against a reference.
    '''
    input:
        fa = os.path.join(data_dir, 'sequences.fasta'),
        ref = os.path.join(data_dir, 'ref', 'ZIKV.fa')
    output:
        aln = os.path.join(data_dir, 'aln.ref.fa')
    params:
        mem = 1000,
        name = 'aln',
        qos = 'fast'
    threads: 12
    singularity: "docker://evolbioinfo/mafft:v7.313"
    shell:
        """
        mafft --thread {threads} --memsave --retree 1 --maxiterate 0 --add {input.fa} \
        --keeplength {input.ref} > {output.aln}
        """

rule remove_ref:
    '''
    Removes the reference from the alignment.
    '''
    input:
        aln = os.path.join(data_dir, 'aln.ref.fa'),
        ids = os.path.join(data_dir, 'ids.txt')
    output:
        aln = os.path.join(data_dir, 'aln.fa')
    params:
        mem = 1000,
        name = 'rmref',
        qos = 'fast',
    threads: 1
    singularity: "docker://evolbioinfo/goalign:v0.3.0-alpha5"
    shell:
        """
        goalign subset -i {input.aln} -f {input.ids} -o {output.aln}
        """

rule nt_to_aa:
    '''
    Convert a nucleotide alignment to amino acid one.
    '''
    input:
        aln = os.path.join(data_dir, 'aln.fa'),
    output:
        aln = os.path.join(data_dir, 'aln.aa.fa'),
    params:
        mem = 1000,
        name = 'nt2aa',
        qos = 'fast',
    threads: 1
    singularity: "docker://evolbioinfo/goalign:v0.3.0-alpha5"
    shell:
        """
        goalign translate -i {input.aln} -o {output.aln}
        """

rule fa2phy:
    '''
    Convert a fasta alignment to phylip format.
    '''
    input:
        aln = os.path.join(data_dir, '{aln}.fa')
    output:
        aln = os.path.join(data_dir, '{aln}.phylip')
    params:
        mem = 1000,
        name = 'fa2phylip'
    threads: 1
    singularity: "docker://evolbioinfo/goalign:v0.3.0-alpha5"
    shell:
        """
        goalign reformat phylip -o {output.aln} -i {input.aln}
        """

rule table2itol:
    '''
    Extracts itol metadata
    '''
    input:
        data = os.path.join(data_dir, 'metadata.tab')
    output:
        os.path.join(data_dir, 'iTOL', 'iTOL_colorstrip-host.txt')
    singularity:
        "docker://evolbioinfo/table2itol:latest"
    params:
        mem = 2000,
        name = 'itol',
        wd = os.path.join(data_dir, 'ALL', 'iTOL')
    threads: 1
    shell: "table2itol.R -i accession {input.data} -D {params.wd}"
